{
  "title": "Envoy - Discovery",
  "cells": [
    {
      "type": "markdown",
      "data": "### Protocol\n\n[Link to article](https://www.envoyproxy.io/docs/envoy/latest/api-docs/xds_protocol#xds-protocol)\n\nResources provided via a `DiscoveryResponse` following the [proto here](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#envoy-api-msg-discoveryresponse).\n\nCan receive the responses from:\n* a filesystem path to watch \n* initiating gRPC streams (initiate via [DiscoveryRequest](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#envoy-api-msg-discoveryrequest))\n* polling a REST-JSON URL (poll via [DiscoveryRequest](https://www.envoyproxy.io/docs/envoy/latest/api-v2/api/v2/discovery.proto#envoy-api-msg-discoveryrequest))\n\nThese APIs use the protobuf concept of [type URLs](https://developers.google.com/protocol-buffers/docs/proto3#any) to provide type / schema information in each request / response as it goes along.\n\nThe whole cycle for one `DiscoveryRequest` is three trips - the request, the response, and an ACK / NACK to the `DiscoveryResponse` with either the most recent version (ACK) or the prior successful version on the NACK with `error_details`.\n\nRequests and responses share a notion of current configuration via the `version` sent back and forth, such that if Envoy failed to apply some discovery data, it would return `error_details` as well as the previously-applied version.\n\nA nonce is also sent for deduping, more below.\n\nThe management server should only send actual updates - any higher frequency will cause spinning. We need to fix this.\n\nThe `resource_name` field in the request is a hint. It's always empty for CDS / LDS, but can be specified for RDS / EDS based off prior CDS + LDS results.\n\n> LDS/CDS resource hints will always be empty and it is expected that the management server will provide the complete state of the LDS/CDS resources in each response. An absent Listener or Cluster will be deleted.\n\nAs Envoy processes separate `DiscoveryResponse` messages from different management servers (or the same server, just with separate gRPC streams for each xDS type URL), there can be a race condition that would lead to a rejection of a newer version.\n\nNonces are used to get around this. The management server (our implementation) should send orderable nonces corresponding to each `DiscoveryRequest`. It must not send a `DiscoveryResponse` for any stale nonce, where a nonce is stale once a newer none has been presented to **Envoy**.\n\nClusters and Listeners go through warming phases. These phases are completed when EDS (ClusterLoadAssignment) and RDS data comes in, respectively.\n\nAll of this eventual consistency can lead to traffic drops. Implement your management server carefully to avoid this:\n\n1) CDS updates (if any) must always be pushed first.\n1) EDS updates (if any) must arrive after CDS updates for the respective clusters.\n1) LDS updates must arrive after corresponding CDS/EDS updates.\n1) RDS updates related to the newly added listeners must arrive after CDS/EDS/LDS updates.\n1) VHDS updates (if any) related to the newly added RouteConfigurations must arrive after RDS updates.\n1) Stale CDS clusters and related EDS endpoints (ones no longer being referenced) can then be removed.\n\nThe best way to do this easily is to use the **Aggregated Discovery Service** (ADS) endpoint, which is one gRPC stream available per Envoy, multiplexed by the type URL.\n\n##### Incremental xDS\n\n> Incremental xDS is a separate xDS endpoint that:\n>\n> * Allows the protocol to communicate on the wire in terms of resource/resource name deltas (“Delta xDS”). This supports the goal of scalability of xDS resources. Rather than deliver all 100k clusters when a single cluster is modified, the management server only needs to deliver the single cluster that changed.\n> * Allows the Envoy to on-demand / lazily request additional resources. For example, requesting a cluster only when a request for that cluster arrives.\n\nWe didn't implement this for Nebula. We probably should. This will all require integration tests though.\n\n**Questions**\n- How does a stream begin with a `DiscoveryRequest` for **specific** resources if Envoy doesn't have any resources bootstrapped at the beginning?\n  - The `resource_name` field in the request is a hint. It's always empty for CDS / LDS, but can be specified for RDS / EDS based off prior CDS + LDS results."
    }
  ]
}