{
  "title": "Jet.com - John Montroy Leaving Mystique",
  "cells": [
    {
      "type": "markdown",
      "data": "\n**Questions for Christoph**\n(For my growth and understanding, I'd like to get more insight into how the team was originally formed, and how some decisions were navigated - I just have some questions that are just meant for conversation and personal development for me.)\n\n1) What level of engagement did you personally expect to have with the codebase of your team? With the Scala ecosystem? With the Spark ecosystem?\n    * Christoph: Deep dives yield \"losing the big picture\", so not much day-to-day interaction intended or expected.\n2) Where were your energies focused in those early days of building Gorilla Grodd and Mystique? What conversations were going on in terms of Mystique's viability and positioning within the company?\n    * The member mart had a lot of pressures on this.\n3) Was a tech lead position considered within the newly-formed Mystique, someone with more coding experience who would guide day-to-day development?\n    * Aashish and Alex were the senior developers.\n4) What was the decision-making process for putting Alex and Aashish in as tech leads? What was conveyed to them as the scope of their roles? Were they expecting to drive Scrums, process backlog, drive thought leadership on the team? Were they expecting to do less coding?\n    * All of the above. Less coding, that was the expectation.\n5) Were we hiring for someone like Lauren before I suggested her? Why didn't we bring in Vaish earlier?\n    * Lauren, yes. Vaish's role was originally sitting somewhat more with Christoph and the tech leads.\n\n**Team Feedback**\nSummary: we struggle in balancing incremental, \"hacky\" and \"tactical\" solutions with long-term planning and strategy. A lot of these long-term issues require buy-in and example-setting from all levels on this team. It is COMPLETELY okay and expected and necessary to move quickly, but it has to be paired with a sober (sometimes boring) treatment of the costs and tech debt being incurred.\n\n1) We need higher accountability on ticket scoping, completion, follow-through, and (to quote Adriano) our \"definition of done\". PMs and such help, but our team engineers (and especially leads) should be be bought in as well (no unscoped, undefined tickets / no open joking about how much \"this stuff sucks I hate this\").\n2) Encourage people to focus on the details. The best time for zooming in is while you're doing the ticket, not later. PRs are a great time for this. Perhaps rotate PR points around to people, such that they have to look at # PRs in their sprint? Some examples of bad attention to detail:\n    * \"I tested on HDI\" => we use Nomad...\n    * \"That dependency is random and our dependencies are all a mess\" => upgrade + migration hell\n    * \"lazy val vs def for that? I dunno\" => trait linearization\n    * \"Yea we can centralize that later\" => never happens, no centralized reusable components\n    * \"I dunno, is that an OO pattern?\" => we have five patterns and four anti-patterns per class\n3) Encourage the use of established patterns and libraries. We build a lot of stuff from scratch. If you're doing something basic (threading, HTTP, ORM, effects management, generics), part of any ticket should be to FIRST hunt for / ask for viable existing solutions. If you're designing components, you should have a decent idea as you're going forward of what patterns you're falling into. Of course, they all have to be treated as _tools_, not shackles!\n4) If no one pays attention in scrums or handovers or learnings, they're pointless. Encourage occassional \"no laptops\" meetings, and force people who don't pay attention to present something themselves.\n5) The \"if it works, it stays\" mentality should be discouraged. \"Suffering-oriented programming\" is great, but only (per the original article) if coupled with a strong sense of refactoring and a knowledge of design patterns. Tech debt should be explicitly handled and written down while it is being incurred.\n\n**Interpersonal Feedback**\n1) We conflate loudness and intensity with strength and quality: the squeaky wheel gets the grease. This feels bad - the most reliable work I've found on this team has been done slowly and steadily.\n    * Example: Alex and Laurence both dominate meetings and ride over other people. I've seen Alex angrily hijack a meeting for its entirety to interrogate someone he disagrees with (me, Maja, Paul, Sam G.), and I've seen Laurence repeatedly answer questions that were asked to other people.\n    * Corollary: Not everyone works the same. Alex \"just wants people to challenge him if he's wrong\" and \"wants to just pair-program\" -- those are his strongest domains, because in my experience they enable him to use his anger and often unpredictable conversational style to dominate and bully people into either agreeing with him or giving up.\n2) We conflate reactive heroics with value. Heroics isolate knowledge and cause repeated mistakes.\n    * Example: Five people don't need to repeatedly stop everything they're working on to jump in on someone else's issue (sometimes that issue isn't even PD!). That's when knowledge gets isolated, decisions get silently made, and actual work items don't get completed.\n    * Corollary: The \"tactical tornado\" who is \"the only person who knows how to fix that\" is full-stop detrimental to the team's success. Quick hacks have to be coupled with more responsible refactors. That doesn't mean \"don't move quickly\", it just means \"don't forget and move on\". Tactical tornadoes == tech debt that has to be cleaned up by other people (or else they can't do their job!). Plus, usually there's not even documentation to help that transition!\n    \n**Alex Feedback**\nAll that follows are concerns because Alex is a tech lead. My understanding of a tech lead conforms to a lot of this:\n\n![IMAGE](quiver-image-url/27EA80313C7B693C03B5C92F90D94C10.jpg =1128x847)\n\nThere seems to be a lack of definition on his exact role. If it's pure tech, then that role doesn't require management of people or emotions. My own beliefs couple with things I've read that a tech lead must do more than that, per the diagram above. The tech lead has to set the example.\n\nAll of these things below set a poor example for the people on his team. If he doesn't buy into these values, or your / his idea of the role isn't clearly defined, it leads to situations like the present one.\n\nMore seriously, all of these things create a culture of uncertainty and fear - at the end of the day, I feel discouraged from speaking my opinion on technical and non-technical issues, because every time I do, it seems to backfire and get me a slap on the wrist (or a punch to the gut!).\n\n1) (Position-related) Alex said he \"doesn't want to deal with people's feelings\". He \"doesn't like non-technical things\", and \"doesn't want to be a glorified Scrum master\" -- there seems to be lack of definition and agreement on what a tech lead does. As someone on his team, it is difficult to navigate this lack of definition.\n2) (Behavior-related) He interrupts, yells at, and bullies his teammates.\n    * After me asking about the scope of the Task initiative after both I and Adriano were surprised by the way the timeline was characterized: \"This is what Laurence and I agreed to with Christoph offline, I'm telling you this is what he thinks, are you telling me I'm lying\"\n    * After me explaining why I didn't vote yes (for the same reasons as others) for a job candidate that he liked, he very aggressively probed me on what exactly I asked the candidate, and said: \"It sounds like he passed your interview, right? He found the optimal solution, so he passed. Why didn't you pass him?\"\n    * After saying that it was unfair to cast all our feedback on his cold storage PR as sudden and late: \"If you think what I'm saying is unfair, I don't care.\" Later on, he would own up to parts of it being mismanaged in our group meeting (where he tried to not let me show my code on the idea of a small refactor).\n    * \"They (Dublin) just don't want to hear our feedback.\" - Dublin came out with incredibly helpful feedback on Tiers when they were here.\n    * Adriano and I said to him separately that some of his concerns on the Tasks API seemed \"philosophical\" because they got to the core of what our team is, and he angrily accused me of trying to throw away and ignore his arguments. A week later, we had meetings and documents on our Mystique Tiers, which was EXACTLY the point.\n    * He thinks in terms of sides. He's said to me - \"I need you to be on my side on this\".\n    * These are all examples from the last two months that I've directly experienced.\n3) He ignores issues and conversations he deems unimportant.\n    * He talked to Leo about team changes for 90 minutes, missed 10 minutes of his own Scrum, and when I went to get him, admitted and even joked to Leo about how \"he should probably go to that\".\n    * I had a meeting about functional tests; he didn't pay attention for the entire meeting (was on laptop Slacking, doing other work) and then told me at the end that it was \"a lot of information to take in\". He supported and possibly requested the meeting ahead of time (memory is fuzzy for me on which).\n    * Alex is the only core person not involved in our OO SOLID learnings. He's also the person most guilty of violating those principles, and the person most in need of them!\n    * He's the person most guilty on the team of ignoring small technical details as specified above.\n    * He's made jokes about \"blanket-approving\" pull requests, not writing documentation, not finishing his tickets, having bad PagerDuty weeks and laughing about the unfixed issues -- that's very discouraging and unprofessional for people really trying to make that \"unimportant\" stuff better.\n    * He came up with the uptime metric, and then full-stop squashed me in a conversation when I said we should try flesh out the process so that it's not just noise week over week.\n"
    }
  ]
}