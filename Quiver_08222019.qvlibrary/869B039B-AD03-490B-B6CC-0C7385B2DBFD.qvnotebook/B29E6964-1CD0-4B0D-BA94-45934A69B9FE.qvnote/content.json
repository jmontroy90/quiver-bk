{
  "title": "Day 10: The factory method design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "This pattern allows us to define common interfaces via subtype polymorphism for related classes. Its main strength is to hide specific implementation details from library users, such that the users can interact with many related classes in the same way. This allows for clear APIs, and easy refactoring.\n\nLet's take the simple example of database connections, per the book:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait SimpleConnection {\n  def getName(): String\n  def executeQuery(query: String): Unit\n}\n\nclass SimpleMysqlConnection extends SimpleConnection {\n  override def getName(): String = \"SimpleMysqlConnection\"\n\n  override def executeQuery(query: String): Unit = {\n    System.out.println(s\"Executing the query '$query' the MySQL way.\")\n  }\n}\n\nclass SimplePgSqlConnection extends SimpleConnection {\n  override def getName(): String = \"SimplePgSqlConnection\"\n\n  override def executeQuery(query: String): Unit = {\n    System.out.println(s\"Executing the query '$query' the PgSQL way.\")\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "This is already summing up the factory pattern - some other class / object can take a `SimpleConnection`, and then implement / pass in either a MySQL or PostgreSql connection, while maintaning the same method calls and return types. Here's a specific factory example that uses this pattern:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "abstract class DatabaseClient {\n  def executeQuery(query: String): Unit = {\n    val connection = connect()\n    connection.executeQuery(query)\n  }\n  \n  protected def connect(): SimpleConnection\n}\n\nclass MysqlClient extends DatabaseClient {\n  override protected def connect(): SimpleConnection = new SimpleMysqlConnection\n}\n\nclass PgSqlClient extends DatabaseClient {\n  override protected def connect(): SimpleConnection = new SimplePgSqlConnection\n}"
    },
    {
      "type": "markdown",
      "data": "Now a `DatabaseClient` can be created that uses one or the other connection type! Also imagine if the connections had different constructors - this can all be hidden and generalized as far as the user goes!\n\nThis pattern can be tricky if there are lots of intertwined factory points (can make logical errors), but generally - if you're looking to abstract away details, this is your ticket!"
    },
    {
      "type": "text",
      "data": ""
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}