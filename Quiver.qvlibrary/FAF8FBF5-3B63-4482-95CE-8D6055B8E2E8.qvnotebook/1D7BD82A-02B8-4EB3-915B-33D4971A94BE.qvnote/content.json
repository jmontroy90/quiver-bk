{
  "title": "Chapter 9 - Simplicity",
  "cells": [
    {
      "type": "markdown",
      "data": "Key points:\n* Boring is good. This is why Golang succeeds, and Scala suffers. Saying no to excess leaves room for actual company innovation, leaving things uncluttered.\n* Don't keep old code. Don't gate it, it's a literal time bomb. Remember Knight Capital -- $400 million in 45 minutes.\n\n> At the end of the day, our job is to keep agility and stability in balance in the system.\n\n> Accidental vs. essential complexity: \"Essential complexity is the complexity inherent in a given situation that cannot be removed from a problem definition, whereas accidental complexity is more fluid and can be resolved with engineering effort. For example, writing a web server entails dealing with the essential complexity of serving web pages quickly. However, if we write a web server in Java, we may introduce accidental complexity when trying to minimize the performance impact of garbage collection.\"\n\n> \"Unlike a detective story, the lack of excitement, suspense, and puzzles is actually a desirable property of source code.”\n\n> \"What if we need that code later?\" \"Why don’t we just comment the code out so we can easily add it again later?\" or \"Why don’t we gate the code with a flag instead of deleting it?\" These are all terrible suggestions. Source control systems make it easy to reverse changes, whereas hundreds of lines of commented code create distractions and confusion (especially as the source files continue to evolve), and code that is never executed, gated by a flag that is always disabled, is a metaphorical time bomb waiting to explode, as painfully experienced by Knight Capital, for example (see \"Order In the Matter of Knight Capital Americas LLC\" [Sec13]).\n\n> Every time we say \"no\" to a feature, we are not restricting innovation; we are keeping the environment uncluttered of distractions so that focus remains squarely on innovation, and real engineering can proceed."
    }
  ]
}