{
  "title": "Chapter 4: Concurrency Patterns in Go",
  "cells": [
    {
      "type": "markdown",
      "data": "Some high-level options for concurrency:\n\n* Synchronization primitives for sharing memory (e.g., sync.Mutex)\n* Synchronization via communicating (e.g., channels)\n* Immutable data\n* Data protected by confinement\n\n## Confinement\n**Confinement** is making sure that information is only ever available for one concurrent process at a time. There are two kinds of confinement:\n1) **Ad hoc** -- channels only have one writer / reader by convention. This is prone to mistakes over time.\n2) **Lexical** -- make it impossible for multiple parts of the code to access your channels simultaneously. This can be aided by making channels bidirectional,  and then returning them as unidirectional.\n\n## for-select\n```\nfor {\n    select {\n    case <-done:\n        return\n    default:\n        // Do non-preemptable work\n    }\n}\n```\nJust loop infinitely until your done channel is ready.\n\n## Preventing Goroutine Leaks\nIf a goroutine creates another goroutine, it's responsible for cleaning it up. Make sure you add `<-done` channels in your select statements, so that a goroutine can be stopped and returned. Also, when you return from a finished goroutine, it's good to return a closed channel as a signal you can use for other goroutines to indicate the goroutine is done.\n\n## The or-channel\nThis is a recursive function that will aggregate in `closes` from channels, yielding a channel that closes whenever the first channel within the set closes. It's like a \"take-who's-done-first\" thing, turning many channels into one channel. This can likely be done much better with a `context`.\n\n## Pipelines\nThis whole section is interesting but I kinda skimmed it. Stream vs. batch processing, transforming sets of data into channels that pipeline functions through, and then generators that do things like `repeat` and `take`. The whole thing is preemptable through closing channels, which makes it pretty resource-safe.\n\n## Fan-Out, Fan-In\n\n"
    }
  ]
}