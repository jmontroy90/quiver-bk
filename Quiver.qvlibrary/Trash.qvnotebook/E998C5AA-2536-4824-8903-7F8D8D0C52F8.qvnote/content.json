{
  "title": "Week 1",
  "cells": [
    {
      "type": "markdown",
      "data": "Two Generals Problem -- how can they share information and coordinate using only asynchronous, unreliable messages? Well, Two Generals is impossible to solve.\n\n`Consensus` -- all nodes agree on some proposed value (in light of crashes and whatnot). In some models, consensus is solved, and in others, not. This is important for `atomic commit` on distributed databases\n\n`Atomic Broadcast` -- broadcast values reliably to all nodes in the same order. Good for creating Replicated State Machines (RSM).\n\nAtomic Broadcast lets you implement Consensus and vice versa.\n\nWe need to make sure we model **time assumptions**. CPU operations take time, network operations have a time bound, and clocks drift!\n\nWe also need **failure assumptions** -- how does the program crash? Does it exhibit byzantine behavior? Does the network drop messages?\n\nWhat models do we have, following these guidelines?\n\n**Asynchronous systems** have no time bounds on CPU or network, and clocks are not synchronized. This is the extreme, and consensus CANNOT be solved in this circumstance (e.g. no atomic broadcast / commit, no leader election). How do you differentiate crashes from latency? There's no way to confirm things!\n\n**Synchronous systems** have known time bounds on network an CPU, and understood drift on clocks. Consensus is solvable in synchronous systems -- violations of latency bounds are just crashes, and crashes can occur in up to `N - 1` nodes in a distributed system.\n\n**Partially synchronous systems** have periods of asynchronicity, but settle into a synchronous state. The internet can be modeled as partially synchronous. Consensus is solvable here  `>= N/2` nodes down.\n\nOur failure states in these systems are helped by **failure detectors** -- heartbeats and healthchecks. Consensus is solvable with failure detectors!\n\n**Timed asynchronous systems** are ones with no bounds on CPU or network time, BUT they do have a known drift rate on clocks! This turns out to be a decent model of the internet."
    }
  ]
}