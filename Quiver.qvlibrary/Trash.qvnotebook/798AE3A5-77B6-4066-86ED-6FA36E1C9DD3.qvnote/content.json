{
  "title": "Helmsman",
  "cells": [
    {
      "type": "markdown",
      "data": "> Helmsman sees what you desire, validates that your desire makes sense (e.g. that the charts you desire are available in the repos you defined), compares it with the current state of Helm and figures out what to do to make your desire come true.\n\nHelmsman uses TOML with Helm's state to make your desired state come true. These semantics are defined by the [desired state specification](https://github.com/Praqma/helmsman/blob/master/docs/desired_state_specification.md).\n\nThe only required field for Helmsman is `namespaces`, which defines which namespaces should exist, and how Tiller (for Helm) should exist in each of those namespaces. The Tiller in the \"kube-system\" namespace is used as a default Tiller.\n\nOptionally, you can add Helm repos and apps. These are optional just because you might not want any apps immediately, but obviously usually you do.\n\n**Helm repos** can be added without configuration for public repos, and with certs for private ones.\n\nThe **apps** themselves require just the namespace, chart, chart version, and the \"enabled\" flag (`false` for deletes). Some other important configs we use:\n* `purge` -- Sets Helm to purge a release, e.g. you can release another Chart with the same name. Normally releases are kept on delete in case of rollbacks.\n* `priority` -- negative numbers which dictate the order of applying apps within this release.\n* `set` -- used to override things in Helm's `Values.yaml` by using env variables corresponding to the set values. Good for secrets.\n* `setString` -- same as above, but for string literals you want to override in `Values.yaml`.\n* `valuesFile` -- sets the location to a custom Helm `Values.yaml`.\n* `test` -- will run Helm tests if true.\n\nRemember, **Tiller** is the Helm server component that interacts directly with the k8s API. It also stores versioned objects corresponding to releases applied in that namespace."
    }
  ]
}