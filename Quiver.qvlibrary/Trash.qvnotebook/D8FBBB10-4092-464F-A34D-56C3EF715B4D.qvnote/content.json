{
  "title": "Ciphers",
  "cells": [
    {
      "type": "markdown",
      "data": "(9/18/2018, \"The Basics\" - \"Perfect Encryption\")\n(38 minutes)\n\nLetâ€™s start with `symmetric encryption`. That means: a **cipher** is used to encrypt data using a **key**. In symmetric encryption, the key used to decrypt is the same as the key used to encrypt. `Asymmetric encryption` has different keys for both.\n\nA key + **plaintext** can be used by a cipher to produce **ciphertext**. Ciphertext + a key can decrypt back to plaintext. _Ciphertext is never shorter than plaintext._\n\n## Classical Ciphers\nLet's start with two classical ciphers.\n##### The Caeser Cipher\nTake letters and shift them right in the alphabet by three letters, with a wrap at the end. The key here is technically that shift value, 3. So \"john montroy\" -> \"mrkq prqwurb\". Easy, and changing the key is still super crackable. Escape rooms do this. Can we do better?\n##### The Vigenere Cipher\nUsed by Confederates in the Civil War! Take a phrase - \"DUH\" - as your key. Shift each letter in your plaintext by a number equal to each key's distance from the letter A. So \"D-U-H\" = 3-20-7. Now your plaintext is encrypted by right shifting letters one at a time. For \"john montroy\", it's \"j + 3, o + 20, h + 7, n + 3, ...\".\n\nThis is breakable by finding the suspected length of the key from pattern analysis, and by frequency analysis (\"E is a common letter, and this text has X most commonly. Let's try X = E and go from there.\").\n\nBut this does okay for short messages that only need encryption for a little while!\n## How Ciphers Work\n**Permutations** + **Mode of Operation**. The permutation is the function defining the substitution / transformation for one letter from plaintext to ciphertext. The mode of operation defines how the permutation operates and varies on a whole plaintext.\n##### Permutations\n* A permutation has to be a one-to-one mapping. This feels important.\n* The permutation must come from the key. No key, no function.\n* Keys shouldn't yield the same permutation. That means someone has fewer keys to try, they don't need exactly yours.\n* Permutations should look random, and not yield obvious patterns.\n\nIf something follows these rules, it's a _secure permutation_.\n\n##### Modes of operation\nThe way a permutation is applied over a whole text. Kind of like a function that takes a permutation function. Probably you can apply this indefinitely.\n\nThese are all insecure. Computers do billions of operation a second. We can try them all. Main problem: to get a secure permutation, you can't have both simple permutations (letter shift) AND short descriptions for your key (\"DUH\"). Modern ciphers choose complex permutations (thousands of simple, reversible operations) using a relatively simple key description (256-bit string!)."
    }
  ]
}