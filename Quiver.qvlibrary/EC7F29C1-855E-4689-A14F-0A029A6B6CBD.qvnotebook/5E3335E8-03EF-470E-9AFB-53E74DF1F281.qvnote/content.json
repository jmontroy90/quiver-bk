{
  "title": "Dynamo",
  "cells": [
    {
      "type": "markdown",
      "data": "## Introduction\n\n[Link to paper](https://www.allthingsdistributed.com/files/amazon-dynamo-sosp2007.pdf)\n\nDynamo is Amazon's K/V store! Between BigTable and Dynamo, you've got most of Cassandra laid out.\n\n> Dynamo uses a synthesis of well known techniques to achieve scalability and availability: Data is partitioned and replicated using consistent hashing [10], and consistency is facilitated by object versioning [12]. The consistency among replicas during updates is maintained by a quorum-like technique and a decentralized replica synchronization protocol. Dynamo employs a gossip based distributed failure detection and membership protocol. Dynamo is a completely decentralized system with minimal need for manual administration. Storage nodes can be added and removed from Dynamo without requiring any manual partitioning or redistribution.\n\nDynamo synthesizes a lot of different techniques to achieve reliability and scalability in a distributed, eventually-consistent world. Let's see how!!!\n\n## Background\n\nTraditional RDBMSes offer more power than needed for most Amazon services; these services just require primary key data access, along with solid availability.\n\nDynamo at a glance:\n* **Query**: simple query model based on primary key\n* **ACID**: weaker consistency instead of ACID, for performance and availability. No isolation guarantees.\n* **Efficiency**: commodity hardware with tight SLAs\n\n\n## Hinted Handoff\n\nWhen trying to validate a quorum write, we only need to confirm writes to `N` \n\n"
    }
  ]
}