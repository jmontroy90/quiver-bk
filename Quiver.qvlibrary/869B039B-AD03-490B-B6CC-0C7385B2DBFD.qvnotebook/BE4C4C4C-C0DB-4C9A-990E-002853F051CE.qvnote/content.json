{
  "title": "Day 14: The singleton design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "Singletons are lazily-instantiated and global. They're normal JVM heap objects. They’re good for:\n* Global state (thread-safe, but not immune to races)\n* Static methods\n* ADTs (see prior day)\n\nThe book claims that they're considered an anti-pattern, and I kinda agree — shoving a whole bunch of state / static methods in a singleton is extremely monolithic and unfriendly to design. A singleton is forever.\n\nWe use singletons for:\n* Entry points\n* Global config / functionality / static methods\n    * Think SharedKafka, CassandraConfig, ParseUtils (stateless), look-up files\n* Essentially \"boxes\" for ADTs, implicit classes, etc.\n* `apply` methods - essentially treating a singleton as a factory for some related type; companion objects are a classic use case."
    },
    {
      "type": "code",
      "language": "scala",
      "data": "// a simple box for an ADT\n// case objects are singletons with `unapply`\nobject MystiqueDataLayer {\n  sealed trait MystiqueDataLayer\n  case object Cassandra extends MystiqueDataLayer\n  case object Cosmos extends MystiqueDataLayer\n}"
    },
    {
      "type": "markdown",
      "data": "Remember: \"Accessing the singletons in an application, no matter if it's Scala or not, also needs to be done in a thread-safe way or the singleton should take care of this internally.\""
    }
  ]
}