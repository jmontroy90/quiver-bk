{
  "title": "Day 6: Self Types",
  "cells": [
    {
      "type": "markdown",
      "data": "Subtype polymorphism is great, but defines purely `is-a` relationships between classes. Sometimes, for separation of concerns, we'd like to define a behavior that `uses-a` / `has-a` different class. This pattern is enabled by `self types`, which look like the following:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait FirstTrait {\n  st: SecondTrait =>\n  \n  // SecondTrait member fields are available here\n}"
    },
    {
      "type": "markdown",
      "data": "This is different from subtype polymorphism because `FirstTrait` is NOT an instance of `SecondTrait` directly, but it does have access to `SecondTrait` and **cannot** be used without extending `SecondTrait`. Also note that while `FirstTrait` can access all of `SecondTrait`, it **cannot** access the parent fields / methods of `SecondTrait`! This prevents inheritence leaking, a common problem with building re-usable components with only subtype polymorphism.\n\nYou can also add multiple traits by doing `_: one with two with ... =>`.\n\nI personally like self types a lot - they're a key component of the `cake pattern` in Scala, and really enable modular component injection. Think of it as injecting a component / behavior at **any** point in an inheritence chain, instead of subtyping and creating really complex / monolithic subtype polymorphism because you have an `is-a` relationship for everything. `has-a` relationships are enabled by self types!\n\nAn example of preventing inheritence leaking via self types:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait DB {\n  def connect(): Unit = {\n    System.out.println(\"Connected.\")\n  }\n  \n  def dropDatabase(): Unit = {\n    System.out.println(\"Dropping!\")\n  }\n  \n  def close(): Unit = {\n    System.out.println(\"Closed.\")\n  }\n}\n\n\ntrait UserDB {\n  this: DB =>\n\n  def createUser(username: String): Unit = {\n    connect()\n    try {\n      System.out.println(s\"Creating a user: $username\")\n    } finally {\n      close()\n    }\n  }\n\n  def getUser(username: String): Unit = {\n    connect()\n    try {\n      System.out.println(s\"Getting a user: $username\")\n    } finally {\n      close()\n    }\n  }\n}\n\ntrait UserService {\n  this: UserDB =>\n  \n  // does not compile, but if you did `_: DB =>` it would\n  // with direct inheritence, dropDatabase would leak!\n  // def bad(): Unit = {\n  // dropDatabase()\n  //}\n}"
    }
  ]
}