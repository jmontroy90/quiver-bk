{
  "title": "Day 18: The decorator design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "Say you want to add functionality / behavior to a class, but you **don't** want to do it via inheritence (ie, kinda muddying up your class separation). The decorator pattern here serves well.\n\nHigh-level, there are two ways to mix in functionality:\n1) _Java-esque_ — create a decorator class that takes some other class object in its constructor, and then uses `super` calls to enhance the original fubcntionality without directly extending the original class. This is a `has-a` model rather than `is-a`, and feels akin to functional composition, but with mix-in ordering determined by inheritence.\n2) _Scala-esque_ — this is simply stackable traits; use the `abstract override` syntax to mix in via `super` calls (preserves interfaces), and self-types to mix in with functional composition (maybe requires more careful method naming / architecture).\n\n#### Java-esque\n\nGiven an interface and a basic implementation, we can use a decorator class as an `abstract class` to start implementing different branches of functionality:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "// basic interface\ntrait InputReader {\n  def readLines(): Stream[String]\n}\n\n// basic implementation\nclass AdvancedInputReader(reader: BufferedReader) extends InputReader {\n  override def readLines(): Stream[String] = reader.lines().iterator().asScala.toStream\n}\n\n// decorator class - notice that it `has-a` reader\nabstract class InputReaderDecorator(inputReader: InputReader) extends InputReader {\n  override def readLines(): Stream[String] = inputReader.readLines()\n}\n\n// two examples from the book here\nclass Base64EncoderInputReader(inputReader: InputReader) extends InputReaderDecorator(inputReader) {\n  override def readLines(): Stream[String] = super.readLines().map {\n    case line => Base64.getEncoder.encodeToString(line.getBytes(Charset.forName(\"UTF-8\")))\n  }\n}\n\nclass CapitalizedInputReader(inputReader: InputReader) extends InputReaderDecorator(inputReader) {\n  override def readLines(): Stream[String] = super.readLines().map(_.toUpperCase)\n}\n\n// usage can be composed, although it's goofy\n// CompressingInputReader not shown here\nval reader = new CompressingInputReader(\n        new Base64EncoderInputReader(\n          new CapitalizedInputReader(\n            new AdvancedInputReader(stream)\n          )\n        )\n      )"
    },
    {
      "type": "markdown",
      "data": "Things to note:\n\n1) This still outlines a `has-a` relationship — the original `InputReader` implementation has technically not been touched.\n2) Effects are composed with `super` calls, which are resolved through the extensive wrapping seen on line 29.\n3) Notice there's no `super` call to any abstract method, like we'll see below — the decorator abstract class assumes it'll be constructed with a concrete `InputReader` with a concrete `readLines`, thus negating any calls to abstract methods.\n4) There are a million ways to achieve this, but this decomposes your functions. It does make types difficult, however, and is also clunky and overly distinct at the call site (what if you create a class that takes only a class object that is base64 and capitalization-friendly?\n\n#### Scala-esque\nScala enables this pattern via `stackable traits` and `abstract override` syntax. Now instead of some abstract decorator class that takes and wraps the base class, we extend the base interface and attach the behaviors to some object at instantion via `with` keywords (subject, of course, to linearization!):"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "// one example behavior\ntrait CapitalizedInputReaderTrait extends InputReader {\n  abstract override def readLines(): Stream[String] = super.readLines().map(_.toUpperCase)\n}"
    },
    {
      "type": "markdown",
      "data": "Notes are:\n1) We can't do this without `abstract override`. Self-types will only help in calling another method, which requires planning.\n2) This pattern can add complexity to your object's type, making it more cumbersome and verbose to pass around.\n3) Like the previous pattern this makes your code much more one-off-y, which can lead to some code sprawl if it's not managed well."
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}