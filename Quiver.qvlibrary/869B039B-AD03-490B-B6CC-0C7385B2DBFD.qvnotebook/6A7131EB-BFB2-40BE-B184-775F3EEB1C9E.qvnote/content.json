{
  "title": "Day 2: Case Classes",
  "cells": [
    {
      "type": "markdown",
      "data": "#### Synopsis\n\nCase classes give you a lot of stuff for free. Companion objects contain `apply` and `unapply`, which allow object construction without `new`, and pattern matching against objects, respectively. Better `toString`, better object equality comparison (via `hashCode`), free `copy` method, and can do more with your `apply` method! \n\n_**Note**_: case class to case class inheritance is prohibited, due to the usage of `apply` for construction instead of standard Java constructors.\n\n_**Note**_: if you want to override methods of a case class at object creation time (step zero: ask why?), you can use the `new` keyword to allow that.\n\n[More specific details in this good article](https://www.scala-exercises.org/scala_tutorial/classes_vs_case_classes)\n\n#### Examples:\n\n```\nclass C(a: Int, b: String)\n\ncase class CC(a: Int, b: String) {\n  def this(a: Int) = this(a, \"\")\n  def this(b: String) = this(-1, b)\n\n  def member: Int = 3\n}\n\nnew CC(3, \"hi\") // uses `apply`, `new` keyword not necessary\nCC(3, \"hi\") // uses `apply`\nnew CC(3) // uses first aux. constructor\nnew CC(\"hi\") // uses second aux. constructor\n\n// CC(3, \"hi\") { override def member: Int = 4 } // not allowed! need to use `new` keyword\nnew CC(3, \"hi\") { override def member: Int = 4 } // allowed!\n\nval cc1 = CC(3, \"hi\")\nprintln(cc1.a, cc1.b) // provides free getters by setting constructor fields to member fields\n\nval cc2 = new CC(3)\nprintln(cc2.a, cc2.b) // using an aux constructor doesn't change anything\n\nval c1 = new C(3, \"hi\")\n// println(c1.a, c1.b) // can't do this, no private access\n\nprintln(c1, cc1) // memory location vs. contents, CC has better `toString`\nprintln(cc1 == CC(3, \"hi\")) // true, case classes can do element-wise comparisons\n\n// can deconstruct case class via `unapply`\ncc1 match {\n  case CC(3, \"hi\") => true\n  case _ => true\n}\n\n/* can't do this, no unapply\nc1 match {\n  case C(3, \"hi\") => true\n  case _ => true\n} */\n```"
    }
  ]
}