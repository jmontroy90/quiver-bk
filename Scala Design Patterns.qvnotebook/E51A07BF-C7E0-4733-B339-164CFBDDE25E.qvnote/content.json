{
  "title": "Day 22: The flyweight design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "The flyweight pattern is meant to help minimize the memory footprint of your classes / objects.\n\nIn short, this is caching. When an object is instantiated that can be reused across multiple other objects, we can cache that object at instantiation time such that subsequent references simply retrieve the instantiated object. This is achieved via mutable Maps / ListBuffers and so on.\n\nTo be honest, I don't see a huge difference between this in just having lazy-initialized singleton objects, as long as your object domain is finite. If your object domain is arbitrary / determined at runtime, it could be good to store them in some sort of caching data structure like a Map.\n\nBrief code example:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "import scala.collection.mutable\n\nclass MySchema(schemaName: String, colNames: Seq[String]) {\n\n  println(s\"Creating new schema $schemaName\")\n\n  override def toString(): String = s\"MySchema($schemaName)\"\n\n  def printColNames: Unit = print(colNames.mkString(\"\\n\"))\n}\n\nobject MySchema {\n  val schemaBuffer: mutable.Map[String, MySchema] = mutable.Map.empty[String, MySchema]\n\n  def apply(schemaName: String, colNames: Seq[String]): MySchema = {\n    schemaBuffer.getOrElseUpdate(schemaName, new MySchema(schemaName, colNames))\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "The clear advantage here is that you'll see upon repeated initialization calls to the same `schemaName` object, you'll only initialize once (`MySchema(\"a\", Seq(\"one\"))` will only print \"Creating new schema a\" once no matter how many times you call it). This is a nicer memory footprint. Always good to consider."
    }
  ]
}