{
  "title": "Day 8: A bit of cake!",
  "cells": [
    {
      "type": "markdown",
      "data": "Also known as \"the bakery of doom\", the `cake pattern` is a classic Scala design pattern for injecting composable components using native Scala functionality. As of 2018, I'm not sure if it's still viewed terribly favorably, but it's worth getting an introduction to.\n\nJava manages dependency injection via external libraries (downside: everyone working with those dependencies need to have awareness of the same library), via interfaces (hard to manage lots of them), or via classes being highly parameterized (hard to refactor, easy to make mistakes!).\n\nLet's take a contrived, kinda academic example:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "// basic behaviors\ntrait Hello {\n  def sayhi(msg: String): String\n}\n\ntrait Wave {\n  def wave(): String\n}\n\ntrait Greet {\n  def greet(msg: String): String\n}\n\n// implementations / components\n// both a member class and a basic implementation\ntrait HelloComponent {\n  val hello: Hello\n\n  class HelloImpl extends Hello {\n    val iStartWith = \"I'mma let you finish, but \"\n    override def sayhi(msg: String) = iStartWith + s\"$msg\"\n  }\n}\n\ntrait WaveComponent {\n  val wave: Wave\n\n  class WaveImpl extends Wave {\n    override def wave(): String = \"I'm waving!\"\n  }\n}\n\ntrait GreetComponent {\n  this: HelloComponent with WaveComponent =>\n\n  val greet: Greet\n\n  class GreetImpl extends Greet {\n    override def greet(msg: String): String = s\"${wave.wave()}\\n${hello.sayhi(msg)}\\nAnd that is my full greeting!\"\n  }\n}\n\ntrait MinimalGreetComponent {\n  this: HelloComponent with WaveComponent =>\n\n  val greet: Greet\n\n  class GreetImpl extends Greet {\n    override def greet(msg: String): String = s\"${wave.wave()}\\n${hello.sayhi(msg)}\"\n  }\n}\n\n// bring it all together\nclass GreeterRegistry extends HelloComponent with WaveComponent with MinimalGreetComponent {\n  override val hello = new HelloImpl\n  override val greet = new GreetImpl\n  override val wave = new WaveImpl\n}\n\n// use everything brought together!\nclass Greeter extends GreeterRegistry {\n  def greetAndWave(msg: String): String = s\"${greet.greet(msg)}\\n${wave.wave()}\"\n}\n\n{ new Greeter }.greetAndWave(\"this seems kinda pointless!\")"
    },
    {
      "type": "markdown",
      "data": "\"OH MY GOD WHY\" is not a bad thing to be thinking right now. I too still find this pattern a little excessive. So let's try to see what we've gained here, in this \"classical cake\":\n* The basic behaviors (base traits) are well-defined and separated.\n* Each behavior's implementation expresses its own dependencies clearly, yet again - separetely.\n* The `GreeterRegistry` expresses the `Greeter` class with both a `is-a` and `has-a` relationship to each injected behavior.\n* The `GreeterRegistry` could choose any implementation of `hello`, `greet`, and `wave`, as long as they extend the basic behaviors. `GreeterRegistry` is how we express interlinking of dependencies.\n* `Greeter` stands as a class with all of its dependencies injected, and now can use all of them at a high level. Think of this as your top-level object, or entrypoint.\n\nOf course, we've also gained a shit-ton of code and complexity. This is a pattern we'll revisit, and as I understand it better (and how it's aged), I'll try to qualify / expand on this example. For now, key takeaways in my mind:\n* The cake pattern is native dependency injection enabled by self types and multiple inheritance. \n* All components are injected and resolved at **compile-time**, whereas Java does it at run-time.\n* Each component should express some implementation of a behavior, and what it needs in order to actualize that implementation.\n* `Registry` classes should bring together dependencies.\n* This pattern only really seems worth it if you truly have a ton of different implementations of the same basic idea. Otherwise, simpler subtype / adhoc polymorphism might do just fine."
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}