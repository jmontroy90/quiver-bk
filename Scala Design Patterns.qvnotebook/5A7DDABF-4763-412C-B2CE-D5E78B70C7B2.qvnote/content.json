{
  "title": "Day 26: The strategy design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "Say we have multiple different algorithms for a problem, each of which is most suitable for a particular kind of data (or related access pattern). The **strategy design pattern** allows us to _chooe at runtime what algorithm to run, based entirely off the input data._\n\nAre you thinking about `case` and `if`? If so, don't stop - that's all this pattern is. tl;dr, here's what it gets down to:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "object Parser {\n  def apply(filename: String): Parser[Person] =\n    filename match {\n      case f if f.endsWith(\".json\") => new JsonParser\n      case f if f.endsWith(\".csv\") => new CSVParser\n      case f => throw new RuntimeException(s\"Unknown format: $f\")\n    }\n}"
    },
    {
      "type": "markdown",
      "data": "You don’t need to know what `Parser` here is. All that’s important - either way parse our `filename` as JSON or as CSV, depending on how `filename` ends (re: file type). So any code that invokes this function will determine how to parse its file at runtime.\n\nBut wait! We have two implementation options here. One of them is object-oriented, and looks like this:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "object ParserExample {\n  def main(args: Array[String]): Unit = {\n    val csvPeople = Parser(\"people.csv\")\n    val jsonPeople = Parser(\"people.json\")\n    \n    val applicationCsv = new PersonApplication(csvPeople)\n    val applicationJson = new PersonApplication(jsonPeople)\n    \n    System.out.println(\"Using the csv: \")\n    applicationCsv.write(\"people.csv\")\n    \n    System.out.println(\"Using the json: \")\n    applicationJson.write(\"people.json\")\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "The `csvPeople` and `jsonPeople` variables are instances of parsers determined dynamically by their file extensions. This is normal OOP - pass an instance of a class to construct another. But can we be functional? Yep:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "object StrategyFactory {\n  implicit val formats = DefaultFormats\n  \n  def apply(filename: String): (String) => List[Person] =\n    filename match {\n      case f if f.endsWith(\".json\") => parseJson\n      case f if f.endsWith(\".csv\") => parseCsv\n      case f => throw new RuntimeException(s\"Unknown format: $f\")\n    }\n  \n  def parseJson(file: String): List[Person] = JsonMethods.parse(StreamInput(this.getClass.getResourceAsStream(file))).extract[List[Person]]\n  \n  def parseCsv(file: String): List[Person] = CSVReader.open(new InputStreamReader(this.getClass.getResourceAsStream(file))).all().map {\n      case List(name, age, address) => Person(name, age.toInt, address)\n    }\n}"
    },
    {
      "type": "markdown",
      "data": "What have we gained here?\n* ANYBODY can create a parse method. It must simply take a `String` and returns a `List[Person]`, and then add it in as a way to potentially parse files. In other words - we're now much less rigid!\n* We're passing functions as first-class objects around. Which, in Scala, is clearly appropriate - all \"methods\" / \"functions\" are simply instances of the corresponding `FunctionN` traits, where a method that takes one parameter is an instance of `Function1`. So clearly we're first-class — we're literally objects.\n\nWhat have we lost?\n* ANYBODY can create a parse method. Allowing total free will is a good way to get code explosion / sprawl. Maybe you should be forcing your coders to think about what's really different between your various parse methods."
    }
  ]
}