{
  "title": "Day 11: The abstract factory method",
  "cells": [
    {
      "type": "markdown",
      "data": "Take the factory method, and instead of creating new classes for particular implementations (we had a `PgSqlClient`) and then creating instances of that, we abstract one level. Now we can have instances corresponding to particular implementations, rather than classes! So like this:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "class DatabaseClient(connectorFactory: DatabaseConnectorFactory) {\n  def executeQuery(query: String): Unit = {\n    val connection = connectorFactory.connect()\n    connection.executeQuery(query)\n  }\n}\n\nval clientMySql: DatabaseClient = new DatabaseClient(new MySqlFactory)\nval clientPgSql: DatabaseClient = new DatabaseClient(new PgSqlFactory)"
    },
    {
      "type": "markdown",
      "data": "This is:\n* Very easy to inject mocks\n* Easy to add new instances and refactor\n* Hides details of instantiation, much like the normal factory method"
    }
  ]
}