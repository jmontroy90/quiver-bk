{
  "title": "Day 20: The composite design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "This pattern helps to group objects that are commonly used together. In short, provide a common interface  and link the implementations such that the user can call the same method and manage the differing objects hierarchically. That's a little opaque, so it's much easier to tether to the classic use case of a tree structure. You could also imagine this for filesystems, AST parsing, etc. It's just barely more than subtype polymorphism - it's that where you expect your subclasses to mingle together in actual use cases, and you want a collection of those subclass objects to play nicely regardless of which one it is, and hide that from the user."
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait Node {\n  def print(prefix: String): Unit\n}\n\nclass Leaf(data: String) extends Node {\n  override def print(prefix: String): Unit = println(prefix + data)\n}\n\nclass Tree extends Node {\n  private val children = scala.collection.mutable.ListBuffer.empty[Node]\n  \n  override def print(prefix: String): Unit = {\n    println(prefix + \"(\")\n    children.foreach(_.print(prefix + prefix))\n    println(prefix + \")\")\n  }\n  \n  def add(child: Node): Unit = {\n    children += child\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "Main thing to note is that both subclasses implement `print`, and the `Tree` implementation can iterate over its children, which can either be a `Tree` or a `Leaf`. Thus, your hierarchy is constructed, and you've done depth-first tree traversal."
    }
  ]
}