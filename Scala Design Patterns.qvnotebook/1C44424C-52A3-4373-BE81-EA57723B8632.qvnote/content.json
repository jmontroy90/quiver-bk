{
  "title": "Day 1: Linearization",
  "cells": [
    {
      "type": "markdown",
      "data": "#### Example 1: Pure linearization"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "class B { print(\"B \") }\n\n\ntrait U1 { print(\"U1 \") }\ntrait U2 { print(\"U2 \") }\ntrait V1 { print(\"V1 \") }\ntrait V2 { print(\"V2 \") }\n\ntrait T1 extends U1 with V1 { print(\"T1 \") }\ntrait T2 extends U2 with V2 { print(\"T2 \") }\ntrait T3 extends U2 with V1 { print(\"T3 \") }\n\nclass A extends B with T1 with T2 with T3"
    },
    {
      "type": "markdown",
      "data": "#### Rules of linearization\nGiven the above, the steps for determining linearization for any instance of `A` are:\n\n1) Reverse all but first class: `A T3 T2 T1 B`\n2) Replace each trait with its linearization (denoted here as `l(trait)`. Make sure you do step 1 for each sub-linearization! \n    * `A T3 T2 T1 B`\n    * `A l(T3) l(T2) l(T1) l(B)`\n    * `A T3 V1 U2 T2 V2 U2 T1 V1 U1 B`\n4) De-dupe from left to right, where the right-most instance wins:\n    * `A T3 T2 V2 U2 T1 V1 U1 B` \n5) Add top-level classes: `A T3 T2 V2 U2 T1 V1 U1 B AnyRef Any`\n\nInitialization order: right to left of linearization order!\n\nSo based off this, we expect the `print` statement to read: `B U1 V1 T1 U2 V2 T2 T3`, where `B` is the top-level parent class and is thus initialized / printed first."
    },
    {
      "type": "markdown",
      "data": "#### Example 2: Working with kinds of `super` calls"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "class MultiplierIdentity { \n  def identity: Int = 1 \n} \n\ntrait DoubledMultiplierIdentity extends MultiplierIdentity { \n  override def identity: Int = 2 * super.identity \n} \n\ntrait TripledMultiplierIdentity extends MultiplierIdentity { \n  override def identity: Int = 3 * super.identity \n} \n\n// all of these are first doubled, then tripled\nclass ModifiedIdentity1 extends DoubledMultiplierIdentity with TripledMultiplierIdentity \n\nclass ModifiedIdentity2 extends DoubledMultiplierIdentity with TripledMultiplierIdentity { \n  override def identity: Int = super[DoubledMultiplierIdentity].identity \n} \n\nclass ModifiedIdentity3 extends DoubledMultiplierIdentity with TripledMultiplierIdentity { \n  override def identity: Int = super[TripledMultiplierIdentity].identity \n} \n\n\nobject ModifiedIdentityUser { \n  \n  def main(args: Array[String]): Unit = { \n    val instance1 = new ModifiedIdentity1 \n    val instance2 = new ModifiedIdentity2 \n    val instance3 = new ModifiedIdentity3 \n    \n    println(s\"Result 1: ${instance1.identity}\") // 6\n    println(s\"Result 2: ${instance2.identity}\") // 2\n    println(s\"Result 3: ${instance3.identity}\") // 6\n  } \n}"
    },
    {
      "type": "markdown",
      "data": "#### Example 3: Lazy vals"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait base { val a: Int; lazy val b: Int = a }\ntrait four extends base { override val a: Int = 4 }\ntrait three extends base { override val a: Int = 3 }\ntrait two extends base { override val a: Int = 2 }\n\nobject one extends four with three with two\nprintln(one.b) // prints 2"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}