{
  "title": "Day 21: The facade design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "The facade design pattern is another kind of wrapper pattern, meant to simplify class usage for developers in the future. Simply provide a simplified interface as access to your base class! The adapter pattern is meant to make **existing** classes work together well, and the decorator pattern is meant to add functionality to classes â€” the facade design pattern is simply an ease-of-access simplification.\n\nExample: say you just finished factoring out your components with the bridge pattern in mind. But now it's too hard to construct a usable object for people unfamiliar with your library - too many constructors, too many stacked traits. Here's where providing a facade \"helper\" class could help!"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait Component1 {\n  val toInit1: Int\n  \n  def myInit(myData: Int): Int = toInit1 + myData\n}\n\ntrait Component2 {\n  def myOtherInit(helpHere: Int): Int = helpHere * 4\n}\n\nclass FacadeClass extends Component1 with Component2 {\n  override val toInit1: Int = 3\n  \n  def facadeHelper(seed: Int): Int = myOtherInit(myInit(3))\n}"
    },
    {
      "type": "markdown",
      "data": "Now the invoker of `FacadeClass` is using three components while only worrying about one bit of state. We could've asked them to initialize `Component1` and `Component2` separately, but we didn't."
    }
  ]
}