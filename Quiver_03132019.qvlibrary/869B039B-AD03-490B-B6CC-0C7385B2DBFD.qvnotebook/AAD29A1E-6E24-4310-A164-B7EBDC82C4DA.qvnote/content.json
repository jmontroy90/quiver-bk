{
  "title": "Day 16: The prototype design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "The prototype pattern just involves generating new objects from existing ones via `copy` calls. In Scala, you get a powerful `copy` method for free on any case class!"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "case class ABC(a: Int, b: Int, c: Int)\nval a1 = ABC(1, 2, 3)\nval a2 = a1.copy(a = 4, b = 5)\n\n// true\na1.isInstanceOf[ABC] && a2.isInstanceOf[ABC]\n\n// false\na1 == a2\n\n// nested is worse to deal with\ncase class DEF(d: Int, e: Int, f: ABC)\nval d1 = DEF(1, 2, ABC(3, 4, 5))\nd1.copy(f = d1.f.copy(b = 2))\n"
    },
    {
      "type": "markdown",
      "data": "This is great, except for the nested case, where you can get some pretty chunky boilerplate depending on how deeply nested your class is. For those cases, consider the `lense pattern`, which will be covered later in this series."
    }
  ]
}