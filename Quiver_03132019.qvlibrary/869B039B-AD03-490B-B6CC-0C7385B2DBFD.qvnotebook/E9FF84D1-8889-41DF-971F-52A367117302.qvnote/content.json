{
  "title": "Day 27: The command design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "The command design pattern is about using an explicit class called an **invoker** to execute a series of related commands with additional state / logging available on those commands. In short, you construct a few things:\n\n* **Receiver** — a class that has the actual implementations of methods. This will be used by all `Commands`.\n* **Command** — a common interface for executing the functionality of a receiver.\n* **Invoker** — the thing that actual executes commands.\n\nThis will be more clear with code examples. Let's see we have the following **receiver**. It's just a normal class with implementations of various functionality:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "case class Robot() {\n  def cleanUp(): Unit = System.out.println(\"Cleaning up.\")\n\n  def pourJuice(): Unit = System.out.println(\"Pouring juice.\")\n}"
    },
    {
      "type": "markdown",
      "data": "Now we need **command** classes to put the `Robot` functionality behind a common interface. This allows our eventual invoker to call all commands the same way — in this case, by just calling the `execute` method on any commands passed in."
    },
    {
      "type": "code",
      "language": "scala",
      "data": "trait RobotCommand {\n  def execute(): Unit\n}\n\ncase class PourJuiceCommand(robot: Robot) extends RobotCommand {\n  override def execute(): Unit = robot.pourJuice()\n}\n\ncase class CleanUpCommand(robot: Robot) extends RobotCommand {\n  override def execute(): Unit = robot.cleanUp()\n}"
    },
    {
      "type": "markdown",
      "data": "Last — we need an **invoker** to actual execute any `RobotCommand` instances passed in, and to also help us with logging and history and literally whatever else we need."
    },
    {
      "type": "code",
      "language": "scala",
      "data": "import scala.collection.mutable.ListBuffer\n\nclass RobotController {\n  val history = ListBuffer[RobotCommand]()\n  \n  def issueCommand(command: RobotCommand): Unit = {\n    history.append(command)\n    command.execute()\n  }\n  \n  def showHistory(): Unit = {\n    history.foreach(println)\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "We use a mutable `ListBuffer` to maintain state on what's been executed. You can also imagine that instead of executing right away on `issueCommand`, we could have some methods like `executeTopCommand`, `executeAllCommands`, and so on. Basically, this is truly all this pattern is — store some state and interact with it later. In this case, our state consists of actual actions, so it can be pretty powerful! I mean, this is basically just imitating a CPU in some ways.\n\nHere's how we can use it:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "object RobotExample {\n  def main(args: Array[String]): Unit = {\n    val robot = Robot()\n    val robotController = new RobotController\n    \n    robotController.issueCommand(MakeSandwichCommand(robot))\n    robotController.issueCommand(PourJuiceCommand(robot))\n    System.out.println(\"I'm eating and having some juice.\")\n    robotController.issueCommand(CleanUpCommand(robot))\n    \n    System.out.println(\"Here is what I asked my robot to do:\")\n    robotController.showHistory()\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "Once again - BUT WAIT! This is all OOP, how does it look functionally? The same, except we send pure functions to the invoker as such:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "class RobotByNameController {\n  val history = ListBuffer[() => Unit]()\n\n  def issueCommand(command: => Unit): Unit = {\n    history.append(command _)\n    command\n  }\n\n  def showHistory(): Unit = {\n    history.foreach(println)\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "This makes use of Scala's `by-name` parameter syntax, which is similar to a `() => Unit` call, but has some interesting different semantics and usage patterns. We'll save that for the next day!"
    }
  ]
}