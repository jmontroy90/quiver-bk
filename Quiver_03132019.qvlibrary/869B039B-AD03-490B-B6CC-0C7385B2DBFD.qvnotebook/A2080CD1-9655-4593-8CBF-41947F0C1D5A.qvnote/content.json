{
  "title": "Day 4: Generics vs Abstract Types",
  "cells": [
    {
      "type": "markdown",
      "data": "##### Generics vs. Abstract types\n\nAbstract types are preceded by the `type` keyword, whereas generics are on classes (which includes methods).\n\n* Abstract types allow for easier path-dependent type usage: `class T { type A }` can be accessed as `T#A`.\n* Abstract types have some trickier variance relationships - once you inject a type in a child class, you can't further specify that type in a subsequent subclass. This is the same as generics, but simple override mechanisms for normal objects lead to coder confusion. Code example for this:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "// with generics\nclass A[X]\nclass B[Y <: AnyVal] extends A[Y]\n\n// this works fine - notice how the scope of the generic extends to the constructor\nclass C[Z <: Int](z: Z) extends B[Z]\n\n// with type members\nclass X { type A }\nclass Y extends X { override type A = AnyVal }\n\n// this is an error! AND -- you cannot refer to the abstract type in the case class constructor / apply method!\ncase class Z() extends Y { override type A = Int; val a: A = 3 }"
    },
    {
      "type": "markdown",
      "data": "* Generics are good for type instantiation - so standard collections, objects of generic classes. Abstract types require a little more verbosity.\n* Generics are way more verbose in general inheritance-based polymorphism (must specify types all the time), see two examples:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "// basic trait with abstract types\nabstract class PrintData\nabstract class PrintMaterial\nabstract class PrintMedia\ntrait Printer {\n  type Data <: PrintData\n  type Material <: PrintMaterial\n  type Media <: PrintMedia\n  \n  def print(data: Data, material: Material, media: Media) = s\"Printing $data with $material material on $media media.\"\n}\n\n// create related subclasses of each type\ncase class Paper() extends PrintMedia\ncase class Air() extends PrintMedia\ncase class Text() extends PrintData\ncase class Model() extends PrintData\ncase class Toner() extends PrintMaterial\ncase class Plastic() extends PrintMaterial\n\n// create specific Printer instance subtyped per abstract type\nclass LaserPrinter extends Printer {\n  type Media = Paper\n  type Data = Text\n  type Material = Toner\n}\nclass ThreeDPrinter extends Printer {\n  type Media = Air\n  type Data = Model\n  type Material = Plastic\n}\n\n// these same classes look like this with generics\ntrait GenericPrinter[Data <: PrintData, Material <: PrintMaterial, Media <: PrintMedia] {\n  def print(data: Data, material: Material, media: Media) = s\"Printing $data with $material material on $media media.\"\n}\n\nclass GenericLaserPrinter[Data <: Text, Material <: Toner, Media <: Paper] extends GenericPrinter[Data, Material, Media]\nclass GenericThreeDPrinter[Data <: Model, Material <: Plastic, Media <: Air] extends GenericPrinter[Data, Material, Media]\n\n// much more verbose and error-prone! must specify types for each new instance!\nval genericLaser = new GenericLaserPrinter[Text, Toner, Paper]\nval genericThreeD = new GenericThreeDPrinter[Model, Plastic, Air]"
    },
    {
      "type": "text",
      "data": ""
    }
  ]
}