{
  "title": "Chapter 7 - SRP: The Single Responsibility Principle",
  "cells": [
    {
      "type": "markdown",
      "data": "`SRP` is the first letter in `SOLID` programming practices, and is summed up as:\n> A module should be responsible to one, and only one, actor.\n\nIf you couple together behaviors that pertain to different actors - different teams, stakeholders, developers - you run the risk of a change by one negatively impacting another.\n\nThis principle does **not** say \"a module should only have one reason to change\" -- it can have many, as long as those reasons are all dictated by only one actor.\n\nImagine an Employee class that has these methods:\n> ![IMAGE](quiver-image-url/B3D3E9EC5C7C04DD9E40E4CEA2A12D89.jpg =207x142)\n\nEach of these methods pertain to different teams. If the class uses common methods, a change in one of those (\"abstraction! DRY! it's good!\") might impact the teams differently. Bad news.\n\nEasiest solution: separate out the different behaviors such that each resulting class is only handled by one actor.\n\n\"But John, holy class explosion!\" -- not really. The classes might be huge, and they're all separate components. That's good. AND if you really want a common interface to library users, use the **facade pattern**:\n> ![IMAGE](quiver-image-url/BF07323E20016F34D1118BA5B74F006C.jpg =480x142)\n\nThis decouples data from behaviors, mediating their actor-specific interactions via new classes. If you want less decoupling (why? it's just inheritence and encapsulation), you could keep your data and facade methods together:\n> ![IMAGE](quiver-image-url/CFDB16BCFD208C8492F08E410A2D6D6D.jpg =401x192)\n\nThis just gives one fewer forwarding method than above, to be honest.\n\nPersonal thoughts: always make sure your classes like `HourReporter` declare their dependencies carefully - don't pass common behaviors from the facade into their constructors, because then you've recoupled! Keep classes to pure data (be careful of hidden behavior coupling on THAT instantiation!) and re-use behavior only WITHIN a component. Strong boundaries.\n\nThe SRP has a lot of spiritual connections to everything else:\n> At the level of components, it becomes the Common Closure Principle. At the architectural level, it becomes the Axis of Change responsible for the creation of Architectural Boundaries."
    }
  ]
}