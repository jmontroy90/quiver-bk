{
  "title": "Module 1: Protocols and Reference Models",
  "cells": [
    {
      "type": "markdown",
      "data": "## The OSI Model\n\n1) Physical Layer\n    * Bits, electricity, voltage, wiring\n2) Data Link Layer\n    * e.g. forwarding based on MAC (media access control) addresses (burned into NIC)\n3) Network Layer\n    * routing / forwarding decisions based on logical addresses e.g. IP addresses.\n    * IP is the main thing we work with here, but for example ICMP is a different layer 3 technology, e.g. ping!\n4) Transport Layer\n    * protocols -- TCP (reliable) / UDP (unreliable)\n5) Session Layer\n    * setting up / tearing down sessions e.g. SIP \n6) Presentation Layer\n    * e.g. ASCII, encryption\n7) Application Layer\n\n_\"Please Do Not Throw Sausage Pizza Away\"_\n\nThe OSI model is generic - it wasn't designed for just IP! So don't get rattled if (for example) security lives on an unexpected layer!\n\n## The DoD Model (TCP / IP Stack)\n\nThe DoD Model maps directly to the OSI model as such:\n\n![IMAGE](quiver-image-url/D1E9C78AC90A666F1774C5CD1C895873.jpg =852x530)\n\n## IP, ICMP, UDP, TCP\n\n**IP** is a layer 3 protocol that manages routing to the internet via logical IP addresses. A router is a layer 3 IP device.\n\n**ICMP** is a different layer 3 protocol for managing internet control stuff. `ping` is an ICMP utility. A ping could go through a switch and then to the router to get an ICMP echo response and detect latency to that.\n\n**UDP** is unreliable. No ACK. Used for VoIP or video streaming.\n\n**TCP** is reliable. It offers a lot in the way of flow control and reliability via segment ordering and windowing. [Windowing](https://www.extrahop.com/company/blog/2017/tcp-windowing/) is the TCP process by which segment flow control can be tweaked -- in short, _receive windows_ and _send windows_ are buffers on both sides meant to hit the right balance of sending and processing data reliably, and the TCP SYN / ACK process includes data on the sizes of these window buffers + how much has been processed out of those buffers.\n\nRemember basic TCP handshakes - SYN (C) -> ACK + SYN (S) -> ACK (C). Three-step handshake!\n\nAlso remember a _NACK_ (negative acknowledgment) and its differences from traffic simply being dropped.\n\nTCP is **stream-oriented** - it has handshakes, ordering, and so on. This is different from how it handles segments, which is transparent to the user.\n\nRemember that TCP is just data - it has no information on how to interpret that data! It simply does ordering and flow control. _HTTP_, for example, is an L7 protocol used by all browsers for managing information over TCP, to be interpreted as whatever -- XML, HTML, whatever.\n\n## Protocol Data Units\nDifferent names at different layers!\n\n![IMAGE](quiver-image-url/E6A337515A0AF42A474B27F85311B8B3.jpg =1560x880)\n\n## Max Transmission Unit (MTU)\n\nThe largest frame or packet that can be transmitted or received on an interface.\n\nHere, \"interface\" refers to either a switch (L2) or a router (L3).\n\nIf a frame being sent to a router exceeds the MTU size, a router can _fragment_ the frame into two packets and send them individually. However, the switch could set a `DF` bit to indicate that the frame shouldn't fragmented. When this occurs, an ICMP message is sent back to the sender to indicate \"Fragmentation needed and DF bit set\".\n\n## Ports and Protocols\n\n_Ephemeral Ports_: > 1023\n_Well-Known Ports_: 1 - 1023\n\n![IMAGE](quiver-image-url/B357A496558FE26E2603BE1EC2210ED8.jpg =1552x902)\n\n![IMAGE](quiver-image-url/75D5A8CF1DA0FE262D09B9D119EB8286.jpg =1590x878)"
    }
  ]
}