{
  "title": "Error Handling",
  "cells": [
    {
      "type": "markdown",
      "data": "Either capture + return your context, or handle your errors directly. Don't throw. That breaks referential transparency. You don't need to carry error state forever up the stack, just as long as you need. \n\n\"Defining errors out of existence\" is handy for brevity and clarity. Example:\n```\ntype errWriter struct {\n\tio.Writer\n\terr error\n}\n\nfunc (e *errWriter) Write(buf []byte) (int, error) {\n\tif e.err != nil {\n\t\treturn 0, e.err\n\t}\n\tvar n int\n\tn, e.err = e.Writer.Write(buf)\n\treturn n, nil\n}\n```\n\nThis `errWriter` has defined behavior for managing errors when used, and implements the `io.Writer` interface nornally via embedding. Encapsulation!\n\nLogging is not a substitute for error handling.\n\nAssert errors for behavior, NOT  types. This means capturing broad swaths of types under banners like `IsRetryable`, `IsTimeout`."
    }
  ]
}