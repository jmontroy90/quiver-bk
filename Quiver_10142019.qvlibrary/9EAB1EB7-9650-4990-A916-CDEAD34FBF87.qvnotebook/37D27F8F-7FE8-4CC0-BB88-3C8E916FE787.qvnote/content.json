{
  "title": "Functors, Applicatives, And Monads In Pictures",
  "cells": [
    {
      "type": "markdown",
      "data": "[Functors, Applicatives, And Monads In Pictures](http://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html)"
    },
    {
      "type": "markdown",
      "data": "**Functors** have a context and contents, and allow for the `map` function to unpack, apply a function, and repack. They're good for simple traversal / application.\n\n**Applicatives** are the same, but instead of your function being `A => B`, it's `G[A => B]`, i.e. both your value and your function are wrapped in a context. Also good for application of functions with more than one argument.\n\n**Monads** are about sequencing effects. If you want to affect your context based on your contents, you have to use the increased power of a monad. By type signature, it's just: `(F[A], A => F[B]): F[B]`. \n\nAll of these are also type classes. So like, `Option` is a particular instance of the Functor, Applicative, and Monad type classes."
    }
  ]
}