{
  "title": "Day 31: The mediator design pattern",
  "cells": [
    {
      "type": "markdown",
      "data": "A standard best practice is to focus your code design on discrete, well-bounded class components, rather than blurring the boundaries of different components together. But at some point, we need different components to interact, right? This is where the **mediator** design pattern comes in — _it defines interactions between discrete components_.\n\nArguably, any class that uses multiple discrete components is a mediator, but obviously there are good and bad mediators. Good design should yield mediators that are as constrained and abstracted as the component they themselves use. Let's take the book's example of a `School` mediator.\n\nWe have here one component for `Student` and one for `Group` — leaving these separate is good component-wise construction, but now we need their interactions. We define these in a mediator, per below:"
    },
    {
      "type": "code",
      "language": "scala",
      "data": "case class Student(name: String, age: Int) {\n  def notify(message: String): Unit = {\n    println(s\"Student $name notified: '$message'.\")\n  }\n}\n\ncase class Group(name: String)\n\n// the mediator\nclass School {\n  val studentsToGroups: Map[Student, Set[Group]] = Map()\n  val groupsToStudents: Map[Group, Set[Student]] = Map()\n\n  def addStudentToGroup(student: Student, group: Group): Unit = {\n    studentsToGroups.getOrElseUpdate(student, Set()) += group\n    groupsToStudents.getOrElseUpdate(group, Set()) += student\n  }\n\n  def isStudentInGroup(student: Student, group: Group): Boolean = {\n    groupsToStudents.getOrElse(group, Set()).contains(student) && studentsToGroups.getOrElse(student, Set()).contains(group)\n  }\n\n  def notifyStudentsInGroup(group: Group, message: String): Unit = {\n    groupsToStudents.getOrElse(group, Set()).foreach(_.notify(message))\n  }\n}"
    },
    {
      "type": "markdown",
      "data": "A natural question to ask — why delegate responsibility of component interactions to a third component, instead of allowing a component a little more awareness of other components? Doesn't the third component introduce more complexity? I'd say no, for a few reasons:\n1) Main problem: explosion of independent opinions. Say you have component A - either components B - Z all independently manage A, or mediator 1 focuses on composing A with B, and A with C, and ((A with B) with C) and so on. A mediator lets you centralize and standardize all those interactions.\n2) Mediators let us stay focused on sharpening our components — how they're accessed, evolved, constructed — and letting the mediators stay focused on keeping well-defined contracts for component interaction.\n\nMediators are everywhere. Any implicit context, some constructor args, bad inheritence — it's all about introducing state into a component so that a component can mediate its own interactions with other things. Being more exacting about what a mediator is allows us to unearth common patterns"
    }
  ]
}