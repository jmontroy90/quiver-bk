{
  "title": "Chapter 3: Declarative Deployment",
  "cells": [
    {
      "type": "markdown",
      "data": "How do we deploy? There might be downtime, tearing down the old service might be complex, and so on. Kubernetes can help.\n\n_Declarative Deployments_ are the way to go - you describe your desired state with high-level config, and Kubernetes seeks to move your deployment into that state. This is better than imperative, where a series of commands is issued - sometimes you might issue too many times or too few, or otherwise have to adjust to context.\n\nIn order to get a well-behaved declarative deployment, you need to ensure that the containers observe normal signals (e.g. SIGTERM), and that Kubernetes healthchecks are indicating healthy.\n\nOnce that's good, here are some ways you can deploy:\n##### Rolling Deployment\nThe default. For Deployments with multiple Pods, a rolling deploymen will spin up another ReplicaSet of your deployment that scales up while your original service scales down. `maxSurge` defines the max number of pods the old + new ReplicaSets combined can have at a given moment (ReplicaSet has 3, `maxSurge` = 1 => up to 4 pods can be running). `maxUnavailable` is the other way - how many Pods can we have down as we roll?\n\nOverall - this is good for a zero-downtime deploy.\n##### Fixed Deployment\nIf you're deploying a new, breaking version of your service, you might not want the intermediate rolling phase where two APIs / behaviors are exposed. A fixed deployment kills your old service entirely (`maxUnavailable` == `size(ReplicaSet)`), and then deploys the new one. No incompatible versions, but definitely some downtime.\n##### Blue-Green Deployment\nThis time, deploy both versions, and use routing + label selectors to route everything first to old (blue), and then at some point after validation, route everything to new (green). This is dangerous for service / state drift, though.\n##### Canary Deployment\nThis is where you only deploy a small instance of your new version, and once again ue routing to direct a subset of users to that new version. Switch over when you feel confident.\n\nAll of these patterns are summarized by this image:\n![IMAGE](quiver-image-url/BBB3E0FDE6D47DD7EC3DB9EC9E8D7C46.jpg =723x435)"
    }
  ]
}